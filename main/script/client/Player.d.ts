//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


/**
 * 游戏玩家服务接口对象
 */
export default class PlayerClient {
  input: Thrift.TJSONProtocol;
  output: Thrift.TJSONProtocol;
  seqid: number;

  constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

  /**
   * 为用户匹配指定游戏分区上固定数量的虚拟玩家，并创建分组
   * 
   * @param uid 玩家ID
   * @param zoneId 游戏分区ID
   * @param num 需要匹配的对手数量
   * @return 匹配结果数据
   *         ```
   *         {
   *             opponents: [EPlayer1, EPlayer2, ..., EPlayerN],
   *             mapScene: EMapScene,
   *         }
   *         ```
   */
  matchOpponents(uid: number, zoneId: number, num: number): string;

  /**
   * 为用户匹配指定游戏分区上固定数量的虚拟玩家，并创建分组
   * 
   * @param uid 玩家ID
   * @param zoneId 游戏分区ID
   * @param num 需要匹配的对手数量
   * @return 匹配结果数据
   *         ```
   *         {
   *             opponents: [EPlayer1, EPlayer2, ..., EPlayerN],
   *             mapScene: EMapScene,
   *         }
   *         ```
   */
  matchOpponents(uid: number, zoneId: number, num: number, callback: Function): void;

  /**
   * 为用户匹配指定游戏分区上固定数量的虚拟玩家，并加入分组
   * 
   * @param uid 玩家ID
   * @param zoneId 游戏分区ID
   * @param num 需要匹配的对手数量
   * @param pkGroupId 需要将匹配对手加入的分组号
   * @return //TODO 2017/12/18 返回的数据格式暂时不确定
   */
  matchOpponentsAndJoinGroup(uid: number, pkGroupId: number, num: number): string;

  /**
   * 为用户匹配指定游戏分区上固定数量的虚拟玩家，并加入分组
   * 
   * @param uid 玩家ID
   * @param zoneId 游戏分区ID
   * @param num 需要匹配的对手数量
   * @param pkGroupId 需要将匹配对手加入的分组号
   * @return //TODO 2017/12/18 返回的数据格式暂时不确定
   */
  matchOpponentsAndJoinGroup(uid: number, pkGroupId: number, num: number, callback: Function): void;

  /**
   * 玩家退出指定的PK分组
   * 
   * @param uid 退出PK分组的玩家
   * @param pkGroupId 需要退出的PK分组号
   */
  quitPKGroup(uid: number, pkGroupId: number): void;

  /**
   * 玩家退出指定的PK分组
   * 
   * @param uid 退出PK分组的玩家
   * @param pkGroupId 需要退出的PK分组号
   */
  quitPKGroup(uid: number, pkGroupId: number, callback: Function): void;

  /**
   * 玩家进入指定的PK分组
   * 
   * @param uid 进入PK分组的玩家
   * @param pkGroupId 需要加入的PK分组号
   */
  joinPKGroup(uid: number, pkGroupId: number): void;

  /**
   * 玩家进入指定的PK分组
   * 
   * @param uid 进入PK分组的玩家
   * @param pkGroupId 需要加入的PK分组号
   */
  joinPKGroup(uid: number, pkGroupId: number, callback: Function): void;

  /**
   * 游戏玩耍开始
   * 
   * @param uid 玩家ID
   * @param pkGroupId PK分组号
   * @return 游戏开始状态
   */
  playStart(uid: number, pkGroupId: number): string;

  /**
   * 游戏玩耍开始
   * 
   * @param uid 玩家ID
   * @param pkGroupId PK分组号
   * @return 游戏开始状态
   */
  playStart(uid: number, pkGroupId: number, callback: Function): void;

  /**
   * 游戏玩耍结束
   * 
   * @param uid 玩家ID
   * @param pkGroupId PK分组号
   * @param playResult 玩耍结果
   * @return 游戏结束状态，包括数据的验证结果
   */
  playEnd(uid: number, pkGroupId: number, playResult: string): string;

  /**
   * 游戏玩耍结束
   * 
   * @param uid 玩家ID
   * @param pkGroupId PK分组号
   * @param playResult 玩耍结果
   * @return 游戏结束状态，包括数据的验证结果
   */
  playEnd(uid: number, pkGroupId: number, playResult: string, callback: Function): void;

  /**
   * @param uid 玩家ID
   * @param hash 本地缓存的用户hash值
   * @return 范湖查询到的玩家基本信息
   */
  getPlayerByUid(uid: number): string;

  /**
   * @param uid 玩家ID
   * @param hash 本地缓存的用户hash值
   * @return 范湖查询到的玩家基本信息
   */
  getPlayerByUid(uid: number, callback: Function): void;

  /**
   * @param uid 玩家ID
   * @param newName 新的昵称
   * @return 返回更新后的名字
   */
  updateNickNameByUid(uid: number, newName: string): string;

  /**
   * @param uid 玩家ID
   * @param newName 新的昵称
   * @return 返回更新后的名字
   */
  updateNickNameByUid(uid: number, newName: string, callback: Function): void;
}
