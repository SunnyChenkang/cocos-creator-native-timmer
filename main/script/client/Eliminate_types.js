//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import Thrift from '../commons/net/thrift'

var EMapScene = function(args) {
  this.id = null;
  this.mapInfo = null;
  this.elementTypes = null;
  this.additionalData = null;
  this.status = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.mapInfo !== undefined && args.mapInfo !== null) {
      this.mapInfo = args.mapInfo;
    }
    if (args.elementTypes !== undefined && args.elementTypes !== null) {
      this.elementTypes = args.elementTypes;
    }
    if (args.additionalData !== undefined && args.additionalData !== null) {
      this.additionalData = args.additionalData;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
EMapScene.prototype = {};
EMapScene.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mapInfo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.elementTypes = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.additionalData = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BYTE) {
        this.status = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EMapScene.prototype.write = function(output) {
  output.writeStructBegin('EMapScene');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.mapInfo !== null && this.mapInfo !== undefined) {
    output.writeFieldBegin('mapInfo', Thrift.Type.STRING, 2);
    output.writeString(this.mapInfo);
    output.writeFieldEnd();
  }
  if (this.elementTypes !== null && this.elementTypes !== undefined) {
    output.writeFieldBegin('elementTypes', Thrift.Type.STRING, 3);
    output.writeString(this.elementTypes);
    output.writeFieldEnd();
  }
  if (this.additionalData !== null && this.additionalData !== undefined) {
    output.writeFieldBegin('additionalData', Thrift.Type.STRING, 4);
    output.writeString(this.additionalData);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BYTE, 5);
    output.writeByte(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


module.exports.default = EMapScene;