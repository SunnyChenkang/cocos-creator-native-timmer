//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES
import Thrift from '../commons/net/thrift'

var Player_matchOpponents_args = function(args) {
  this.uid = null;
  this.zoneId = null;
  this.num = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.zoneId !== undefined && args.zoneId !== null) {
      this.zoneId = args.zoneId;
    }
    if (args.num !== undefined && args.num !== null) {
      this.num = args.num;
    }
  }
};
Player_matchOpponents_args.prototype = {};
Player_matchOpponents_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.uid = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.zoneId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.num = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player_matchOpponents_args.prototype.write = function(output) {
  output.writeStructBegin('Player_matchOpponents_args');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.I32, 1);
    output.writeI32(this.uid);
    output.writeFieldEnd();
  }
  if (this.zoneId !== null && this.zoneId !== undefined) {
    output.writeFieldBegin('zoneId', Thrift.Type.I32, 2);
    output.writeI32(this.zoneId);
    output.writeFieldEnd();
  }
  if (this.num !== null && this.num !== undefined) {
    output.writeFieldBegin('num', Thrift.Type.I32, 3);
    output.writeI32(this.num);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Player_matchOpponents_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Player_matchOpponents_result.prototype = {};
Player_matchOpponents_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player_matchOpponents_result.prototype.write = function(output) {
  output.writeStructBegin('Player_matchOpponents_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Player_matchOpponentsAndJoinGroup_args = function(args) {
  this.uid = null;
  this.pkGroupId = null;
  this.num = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.pkGroupId !== undefined && args.pkGroupId !== null) {
      this.pkGroupId = args.pkGroupId;
    }
    if (args.num !== undefined && args.num !== null) {
      this.num = args.num;
    }
  }
};
Player_matchOpponentsAndJoinGroup_args.prototype = {};
Player_matchOpponentsAndJoinGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.uid = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pkGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.num = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player_matchOpponentsAndJoinGroup_args.prototype.write = function(output) {
  output.writeStructBegin('Player_matchOpponentsAndJoinGroup_args');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.I32, 1);
    output.writeI32(this.uid);
    output.writeFieldEnd();
  }
  if (this.pkGroupId !== null && this.pkGroupId !== undefined) {
    output.writeFieldBegin('pkGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.pkGroupId);
    output.writeFieldEnd();
  }
  if (this.num !== null && this.num !== undefined) {
    output.writeFieldBegin('num', Thrift.Type.I32, 3);
    output.writeI32(this.num);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Player_matchOpponentsAndJoinGroup_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Player_matchOpponentsAndJoinGroup_result.prototype = {};
Player_matchOpponentsAndJoinGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player_matchOpponentsAndJoinGroup_result.prototype.write = function(output) {
  output.writeStructBegin('Player_matchOpponentsAndJoinGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Player_quitPKGroup_args = function(args) {
  this.uid = null;
  this.pkGroupId = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.pkGroupId !== undefined && args.pkGroupId !== null) {
      this.pkGroupId = args.pkGroupId;
    }
  }
};
Player_quitPKGroup_args.prototype = {};
Player_quitPKGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.uid = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pkGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player_quitPKGroup_args.prototype.write = function(output) {
  output.writeStructBegin('Player_quitPKGroup_args');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.I32, 1);
    output.writeI32(this.uid);
    output.writeFieldEnd();
  }
  if (this.pkGroupId !== null && this.pkGroupId !== undefined) {
    output.writeFieldBegin('pkGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.pkGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Player_quitPKGroup_result = function(args) {
};
Player_quitPKGroup_result.prototype = {};
Player_quitPKGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player_quitPKGroup_result.prototype.write = function(output) {
  output.writeStructBegin('Player_quitPKGroup_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Player_joinPKGroup_args = function(args) {
  this.uid = null;
  this.pkGroupId = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.pkGroupId !== undefined && args.pkGroupId !== null) {
      this.pkGroupId = args.pkGroupId;
    }
  }
};
Player_joinPKGroup_args.prototype = {};
Player_joinPKGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.uid = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pkGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player_joinPKGroup_args.prototype.write = function(output) {
  output.writeStructBegin('Player_joinPKGroup_args');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.I32, 1);
    output.writeI32(this.uid);
    output.writeFieldEnd();
  }
  if (this.pkGroupId !== null && this.pkGroupId !== undefined) {
    output.writeFieldBegin('pkGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.pkGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Player_joinPKGroup_result = function(args) {
};
Player_joinPKGroup_result.prototype = {};
Player_joinPKGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player_joinPKGroup_result.prototype.write = function(output) {
  output.writeStructBegin('Player_joinPKGroup_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Player_playStart_args = function(args) {
  this.uid = null;
  this.pkGroupId = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.pkGroupId !== undefined && args.pkGroupId !== null) {
      this.pkGroupId = args.pkGroupId;
    }
  }
};
Player_playStart_args.prototype = {};
Player_playStart_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.uid = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pkGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player_playStart_args.prototype.write = function(output) {
  output.writeStructBegin('Player_playStart_args');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.I32, 1);
    output.writeI32(this.uid);
    output.writeFieldEnd();
  }
  if (this.pkGroupId !== null && this.pkGroupId !== undefined) {
    output.writeFieldBegin('pkGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.pkGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Player_playStart_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Player_playStart_result.prototype = {};
Player_playStart_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player_playStart_result.prototype.write = function(output) {
  output.writeStructBegin('Player_playStart_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Player_playEnd_args = function(args) {
  this.uid = null;
  this.pkGroupId = null;
  this.playResult = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.pkGroupId !== undefined && args.pkGroupId !== null) {
      this.pkGroupId = args.pkGroupId;
    }
    if (args.playResult !== undefined && args.playResult !== null) {
      this.playResult = args.playResult;
    }
  }
};
Player_playEnd_args.prototype = {};
Player_playEnd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.uid = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pkGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.playResult = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player_playEnd_args.prototype.write = function(output) {
  output.writeStructBegin('Player_playEnd_args');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.I32, 1);
    output.writeI32(this.uid);
    output.writeFieldEnd();
  }
  if (this.pkGroupId !== null && this.pkGroupId !== undefined) {
    output.writeFieldBegin('pkGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.pkGroupId);
    output.writeFieldEnd();
  }
  if (this.playResult !== null && this.playResult !== undefined) {
    output.writeFieldBegin('playResult', Thrift.Type.STRING, 3);
    output.writeString(this.playResult);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Player_playEnd_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Player_playEnd_result.prototype = {};
Player_playEnd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player_playEnd_result.prototype.write = function(output) {
  output.writeStructBegin('Player_playEnd_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Player_getPlayerByUid_args = function(args) {
  this.uid = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
  }
};
Player_getPlayerByUid_args.prototype = {};
Player_getPlayerByUid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.uid = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player_getPlayerByUid_args.prototype.write = function(output) {
  output.writeStructBegin('Player_getPlayerByUid_args');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.I32, 1);
    output.writeI32(this.uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Player_getPlayerByUid_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Player_getPlayerByUid_result.prototype = {};
Player_getPlayerByUid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player_getPlayerByUid_result.prototype.write = function(output) {
  output.writeStructBegin('Player_getPlayerByUid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Player_updateNickNameByUid_args = function(args) {
  this.uid = null;
  this.newName = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.newName !== undefined && args.newName !== null) {
      this.newName = args.newName;
    }
  }
};
Player_updateNickNameByUid_args.prototype = {};
Player_updateNickNameByUid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.uid = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player_updateNickNameByUid_args.prototype.write = function(output) {
  output.writeStructBegin('Player_updateNickNameByUid_args');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.I32, 1);
    output.writeI32(this.uid);
    output.writeFieldEnd();
  }
  if (this.newName !== null && this.newName !== undefined) {
    output.writeFieldBegin('newName', Thrift.Type.STRING, 2);
    output.writeString(this.newName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Player_updateNickNameByUid_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Player_updateNickNameByUid_result.prototype = {};
Player_updateNickNameByUid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Player_updateNickNameByUid_result.prototype.write = function(output) {
  output.writeStructBegin('Player_updateNickNameByUid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PlayerClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
PlayerClient.prototype = {};
PlayerClient.prototype.matchOpponents = function(uid, zoneId, num, callback) {
  this.send_matchOpponents(uid, zoneId, num, callback); 
  if (!callback) {
    return this.recv_matchOpponents();
  }
};

PlayerClient.prototype.send_matchOpponents = function(uid, zoneId, num, callback) {
  this.output.writeMessageBegin('matchOpponents', Thrift.MessageType.CALL, this.seqid);
  var args = new Player_matchOpponents_args();
  args.uid = uid;
  args.zoneId = zoneId;
  args.num = num;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_matchOpponents();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

PlayerClient.prototype.recv_matchOpponents = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Player_matchOpponents_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'matchOpponents failed: unknown result';
};
PlayerClient.prototype.matchOpponentsAndJoinGroup = function(uid, pkGroupId, num, callback) {
  this.send_matchOpponentsAndJoinGroup(uid, pkGroupId, num, callback); 
  if (!callback) {
    return this.recv_matchOpponentsAndJoinGroup();
  }
};

PlayerClient.prototype.send_matchOpponentsAndJoinGroup = function(uid, pkGroupId, num, callback) {
  this.output.writeMessageBegin('matchOpponentsAndJoinGroup', Thrift.MessageType.CALL, this.seqid);
  var args = new Player_matchOpponentsAndJoinGroup_args();
  args.uid = uid;
  args.pkGroupId = pkGroupId;
  args.num = num;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_matchOpponentsAndJoinGroup();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

PlayerClient.prototype.recv_matchOpponentsAndJoinGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Player_matchOpponentsAndJoinGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'matchOpponentsAndJoinGroup failed: unknown result';
};
PlayerClient.prototype.quitPKGroup = function(uid, pkGroupId, callback) {
  this.send_quitPKGroup(uid, pkGroupId, callback); 
  if (!callback) {
  this.recv_quitPKGroup();
  }
};

PlayerClient.prototype.send_quitPKGroup = function(uid, pkGroupId, callback) {
  this.output.writeMessageBegin('quitPKGroup', Thrift.MessageType.CALL, this.seqid);
  var args = new Player_quitPKGroup_args();
  args.uid = uid;
  args.pkGroupId = pkGroupId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_quitPKGroup();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

PlayerClient.prototype.recv_quitPKGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Player_quitPKGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
PlayerClient.prototype.joinPKGroup = function(uid, pkGroupId, callback) {
  this.send_joinPKGroup(uid, pkGroupId, callback); 
  if (!callback) {
  this.recv_joinPKGroup();
  }
};

PlayerClient.prototype.send_joinPKGroup = function(uid, pkGroupId, callback) {
  this.output.writeMessageBegin('joinPKGroup', Thrift.MessageType.CALL, this.seqid);
  var args = new Player_joinPKGroup_args();
  args.uid = uid;
  args.pkGroupId = pkGroupId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_joinPKGroup();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

PlayerClient.prototype.recv_joinPKGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Player_joinPKGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
PlayerClient.prototype.playStart = function(uid, pkGroupId, callback) {
  this.send_playStart(uid, pkGroupId, callback); 
  if (!callback) {
    return this.recv_playStart();
  }
};

PlayerClient.prototype.send_playStart = function(uid, pkGroupId, callback) {
  this.output.writeMessageBegin('playStart', Thrift.MessageType.CALL, this.seqid);
  var args = new Player_playStart_args();
  args.uid = uid;
  args.pkGroupId = pkGroupId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_playStart();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

PlayerClient.prototype.recv_playStart = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Player_playStart_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'playStart failed: unknown result';
};
PlayerClient.prototype.playEnd = function(uid, pkGroupId, playResult, callback) {
  this.send_playEnd(uid, pkGroupId, playResult, callback); 
  if (!callback) {
    return this.recv_playEnd();
  }
};

PlayerClient.prototype.send_playEnd = function(uid, pkGroupId, playResult, callback) {
  this.output.writeMessageBegin('playEnd', Thrift.MessageType.CALL, this.seqid);
  var args = new Player_playEnd_args();
  args.uid = uid;
  args.pkGroupId = pkGroupId;
  args.playResult = playResult;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_playEnd();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

PlayerClient.prototype.recv_playEnd = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Player_playEnd_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'playEnd failed: unknown result';
};
PlayerClient.prototype.getPlayerByUid = function(uid, callback) {
  this.send_getPlayerByUid(uid, callback); 
  if (!callback) {
    return this.recv_getPlayerByUid();
  }
};

PlayerClient.prototype.send_getPlayerByUid = function(uid, callback) {
  this.output.writeMessageBegin('getPlayerByUid', Thrift.MessageType.CALL, this.seqid);
  var args = new Player_getPlayerByUid_args();
  args.uid = uid;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getPlayerByUid();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

PlayerClient.prototype.recv_getPlayerByUid = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Player_getPlayerByUid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getPlayerByUid failed: unknown result';
};
PlayerClient.prototype.updateNickNameByUid = function(uid, newName, callback) {
  this.send_updateNickNameByUid(uid, newName, callback); 
  if (!callback) {
    return this.recv_updateNickNameByUid();
  }
};

PlayerClient.prototype.send_updateNickNameByUid = function(uid, newName, callback) {
  this.output.writeMessageBegin('updateNickNameByUid', Thrift.MessageType.CALL, this.seqid);
  var args = new Player_updateNickNameByUid_args();
  args.uid = uid;
  args.newName = newName;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateNickNameByUid();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

PlayerClient.prototype.recv_updateNickNameByUid = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Player_updateNickNameByUid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateNickNameByUid failed: unknown result';
};


module.exports.default = PlayerClient;